---
name: Common linting

on:
  workflow_call:
    inputs:
      go-version:
        default: "1.19"
        required: false
        type: string
      packer-version:
        default: ""
        required: false
        type: string
      python-version:
        default: "3.10"
        required: false
        type: string
      run-tmate:
        default: false
        required: false
        type: boolean
      shfmt-version:
        default: ""
        required: false
        type: string
      terraform-version:
        default: ""
        required: false
        type: string
      terraform-docs-version:
        default: ""
        required: false
        type: string

env:
  CURL_CACHE_DIR: ~/.cache/curl
  PIP_CACHE_DIR: ~/.cache/pip
  PRE_COMMIT_CACHE_DIR: ~/.cache/pre-commit

jobs:
  get_tool_versions:
    outputs:
      packer-version: ${{ steps.check-packer-version.outputs.version }}
      shfmt-version: ${{ steps.check-shfmt-version.outputs.version }}
      terraform-version: ${{ steps.check-terraform-version.outputs.version }}
      terraform-docs-version: ${{ steps.check-terraform-docs-version.outputs.version }}
    runs-on: ubuntu-latest
    steps:
      - id: setup-env
        uses: cisagov/setup-env-github-action@develop
      # These steps are very simple run commands to check if a version has been
      # provided and output either that version or use the version provided from
      # cisagov/setup-env-github-action as a default value. Breaking the run
      # commands up to pass yamllint line-length checks would needlessly
      # complicate things so we disable that check for this section of the file.
      # yamllint disable rule:line-length
      - id: check-packer-version
        run: echo "version=${{ inputs.packer-version || steps.setup-env.outputs.packer-version }}" >> $GITHUB_OUTPUT
      - id: check-shfmt-version
        run: echo "version=${{ inputs.shfmt-version || steps.setup-env.outputs.shfmt-version }}" >> $GITHUB_OUTPUT
      - id: check-terraform-version
        run: echo "version=${{ inputs.terraform-version || steps.setup-env.outputs.terraform-version }}" >> $GITHUB_OUTPUT
      - id: check-terraform-docs-version
        run: echo "version=${{ inputs.terraform-docs-version || steps.setup-env.outputs.terraform-docs-version }}" >> $GITHUB_OUTPUT
      # yamllint enable rule:line-length
  common_lint:
    needs:
      - get_tool_versions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
      # We need the Go version and Go cache location for the actions/cache step,
      # so the Go installation must happen before that.
      - id: setup-go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ inputs.go-version }}
      - name: Lookup Go cache directory
        id: go-cache
        run: |
          echo "dir=$(go env GOCACHE)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        env:
          BASE_CACHE_KEY: "${{ github.job }}-${{ runner.os }}-\
            py${{ steps.setup-python.outputs.python-version }}-\
            go${{ steps.setup-go.outputs.go-version }}-\
            packer${{ needs.get_tool_versions.outputs.packer-version }}-\
            tf${{ needs.get_tool_versions.outputs.terraform-version }}-"
        with:
          # Note that the .terraform directory IS NOT included in the
          # cache because if we were caching, then we would need to use
          # the `-upgrade=true` option. This option blindly pulls down the
          # latest modules and providers instead of checking to see if an
          # update is required. That behavior defeats the benefits of caching.
          # so there is no point in doing it for the .terraform directory.
          path: |
            ${{ env.PIP_CACHE_DIR }}
            ${{ env.PRE_COMMIT_CACHE_DIR }}
            ${{ env.CURL_CACHE_DIR }}
            ${{ steps.go-cache.outputs.dir }}
          key: "${{ env.BASE_CACHE_KEY }}\
            ${{ hashFiles('**/requirements-test.txt') }}-\
            ${{ hashFiles('**/requirements.txt') }}-\
            ${{ hashFiles('**/.pre-commit-config.yaml') }}"
          restore-keys: |
            ${{ env.BASE_CACHE_KEY }}
      - name: Setup curl cache
        run: mkdir -p ${{ env.CURL_CACHE_DIR }}
      - name: Install Packer
        env:
          PACKER_VERSION: ${{ needs.get_tool_versions.outputs.packer-version }}
        run: |
          PACKER_ZIP="packer_${PACKER_VERSION}_linux_amd64.zip"
          curl --output ${{ env.CURL_CACHE_DIR }}/"${PACKER_ZIP}" \
            --time-cond ${{ env.CURL_CACHE_DIR }}/"${PACKER_ZIP}" \
            --location \
            "https://releases.hashicorp.com/packer/${PACKER_VERSION}/${PACKER_ZIP}"
          sudo unzip -d /opt/packer \
            ${{ env.CURL_CACHE_DIR }}/"${PACKER_ZIP}"
          sudo mv /usr/local/bin/packer /usr/local/bin/packer-default
          sudo ln -s /opt/packer/packer /usr/local/bin/packer
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ needs.get_tool_versions.outputs.terraform-version }}
      - name: Install shfmt
        env:
          PACKAGE_URL: mvdan.cc/sh/v3/cmd/shfmt
          PACKAGE_VERSION: ${{ needs.get_tool_versions.outputs.shfmt-version }}
        run: go install ${PACKAGE_URL}@${PACKAGE_VERSION}
      - name: Install Terraform-docs
        env:
          PACKAGE_URL: github.com/terraform-docs/terraform-docs
          PACKAGE_VERSION: ${{ needs.get_tool_versions.outputs.terraform-docs-version }}
        run: go install ${PACKAGE_URL}@${PACKAGE_VERSION}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade --requirement requirements-test.txt
      - name: Set up pre-commit hook environments
        run: pre-commit install-hooks
      - name: Run pre-commit on all files
        run: pre-commit run --all-files
      - name: Setup tmate debug session
        uses: mxschmitt/action-tmate@v3
        if: inputs.run-tmate
