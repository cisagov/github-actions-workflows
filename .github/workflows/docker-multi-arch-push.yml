---
name: "Push Multi-Architecture Image"

# This reusable workflow reads OCI image archives from an artifact and publishes
# a multi-architecture images to one or more registries.

on:
  workflow_call:
    inputs:
      # Required inputs
      artifact_name:
        description: "Artifact containing the image archives"
        required: true
        type: string
      image_tags:
        description: "The tags to apply to the image"
        required: true
        type: string
    secrets:
      image_archive_key:
        description: "Enables decryption of image archives"
        required: false
      docker_password:
        description: "The password for the Docker hub account"
        required: true
      docker_username:
        description: "The username for the Docker hub account"
        required: true

env:
  ARTIFACT_WORK_DIR: /tmp/artifact-work

jobs:
  publish:
    name: "Load and push multi-arch image"
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2.4.1
        with:
          allowed-endpoints: >
            auth.docker.io:443
            docker.io:443
            ghcr.io:443
            github.com:443
            index.docker.io:443
            production.cloudflare.docker.com:443
            registry-1.docker.io:443

      - name: Check Docker credentials
        run: |
          return_code=0
          if [ -z "${{ secrets.docker_username }}" ]; then
            echo "::warning::Set the docker_username secret."
            return_code=1
          fi
          if [ -z "${{ secrets.docker_password }}" ]; then
            echo "::warning::Set the docker_password secret."
            return_code=1
          fi
          exit $return_code

      - uses: actions/checkout@v3.5.3

      - name: Login to Docker Hub
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.docker_username }}
          password: ${{ secrets.docker_password }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Docker images artifact
        uses: actions/download-artifact@3.0.2
        with:
          name: ${{ inputs.artifact_name }}
          path: ${{ env.ARTIFACT_WORK_DIR }}

      - name: Start local registry
        run: |
          docker run --detach --publish 5000:5000 \
          --restart=always --name registry registry:2

      - name: Combine images and push
        run: |
          set -o errexit
          set -o nounset
          set -o pipefail

          image_tags="${{ inputs.image_tags }}"

          # Loop through all the archives in the directory
          append="" # skip appending the first image
          for archive in "${{ env.ARTIFACT_WORK_DIR }}"/*; do
              echo "::group::Loading image from $archive"
              # If the filename ends in 7z, then decrypt it first
              if [[ "${archive}" == *".7z" ]]; then
                  load_output=$(7za x -p${{ secrets.image_archive_key }} \
                  -so "${archive}" | docker load)
              else
                  load_output=$(docker load -i "${archive}")
              fi
              echo "Docker load output: ${load_output}"

              # Get the id of the image that was just loaded
              image_id=$(echo "${load_output}" | awk '{print $NF}')
              echo "Extracted image id: ${image_id}"

              # Tag the image with the localhost registry
              docker tag "${image_id}" "localhost:5000/single_arch:latest"

              # Push the image to the localhost registry
              docker push "localhost:5000/single_arch:latest"

              # Create a multi-arch manifest for each image tag
              for tag in ${image_tags//\\n/ }; do
                  docker buildx imagetools create ${append} \
                      --tag ${tag} \
                      "localhost:5000/single_arch:latest"
              done

              # Clean up the local Docker image store
              echo "Cleaning up local Docker image store"
              docker rmi "${image_id}"

              # Set the append flag for next iteration
              append="--append"
              echo "::endgroup::"
          done

      - name: Stop local registry
        if: always()
        run: |
          docker stop registry
          docker rm registry

      - name: Inspect manifests
        run: |
          image_tags="${{ inputs.image_tags }}"

          for tag in ${image_tags//\\n/ }; do
            echo "::group::Inspecting ${tag}"
            docker buildx imagetools inspect "${tag}"
            echo "::endgroup::"
          done
